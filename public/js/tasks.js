[{"name":"01. Object Literals","tasks":[{"name":"01. Object properties","description":"Set the three properties, in three different ways.","code":"var person = {\n\n};\n\n\nassert(person.name === 'bob', 'name should equal \"bob\"');\nassert(person.gender === 'male', 'gender should equal \"male\"');\nassert(person.weight === 100, 'weight should equal 100');"},{"name":"02. Populating arrays","description":"Populate the array, please.","code":"var arr = [];\nvar i;\nfor (i = 0; i < 10; i += 1) {\n  // ..\n}\n\nassert(arr[0] === 0, 'first element should equal 0');\nassert(arr[1] === 1, 'second element should equal 1');\nassert(arr.length === 10, 'array length should be 10');"},{"name":"03. What have you got","description":"Complete createCopy, so that all properties of the original are transfered to the copy.","code":"function createCopy (original) {\n  var copy = [];\n  for ( ... ) {\n    copy[k] = original[k];\n  }\n  return copy;\n}\n\nvar a = [];\na.key = 1;\na['key2'] = 1;\na.push(2);\n\nvar b = createCopy(a);\n\nassert(b[0] === 2, 'element was not copied');\nassert(b.key === 1, 'key was not copied');\nassert(b['key2'] === 1, 'key2 was not copied');"},{"name":"04. Who are you","description":"Make the doubleMe function return the argument type followed by the value doubled for numbers and the string repeated twice for strings.","code":"function doubleMe (val) {\n\n}\n\nassert(doubleMe(17) === 'number 34', \n  '17 doubled should equal \"number 34\"');\nassert(doubleMe('painnkaak') === 'string painnkaakpainnkaak', \n  'painnkaak doubled should equal \"string painnkaakpainnkaak\"');"}]},{"name":"02. Functions","tasks":[{"name":"01. How many arguments do you have","description":"Complete the sum function, making it sum all arguments, no matter how many you give it.","code":"function sum () {\n  var s = 0;\n\n  return s;\n}\n\nassert(sum() === 0, 'sum without arguments should be 0');\nassert(sum(1, 2) === 3, 'sum with arguments 1 and 2 should equal 3');\nassert(sum(1, 2, 3) === 6, 'sum with arguments 1, 2, and 3 should equal 6');"},{"name":"02. Higher order functions","description":"Create a function that returns new functions that return true!","code":"var createFunction = function () {};\n\nassert(typeof createFunction() === 'function', \n  'createFunction() should return a function');\nassert(createFunction()() === true, \n  \"calling createFunction's returned function should return true\");"},{"name":"03. JavaScript pwns your scope (hard)","description":"Make all asserts pass by uncommenting each assert and only changing double dots into variables, function calls and typeof-s.","code":"var a = 1;\nb = 3;\nvar s = 1;\n\n(function () {\n  a = 2;\n  b = 4;\n  var C = 3;\n  d = 1;\n  s = 2;\n\n  if (false) {\n    var s;\n    function f () {\n      var s = 7;\n      return s;\n    }\n  }\n\n  assert( .. === 2);\n  // assert( .. === 3);\n  // assert( .. === 4);\n  // assert( .. === 1);\n  // assert( .. === 7);\n  // assert( .. === 2);\n\n})();\n\n// assert( .. === 2);\n// assert( .. === 4);\n// assert( .. === 'undefined');\n// assert( .. === 1);\n// assert( .. === 'undefined');\n// assert( .. === 1);"},{"name":"04. Variables by reference (intermediate)","description":"Log numbers 0-4 correctly in by extracting the setTimeout call to bind variable i:","code":"var i;\nfor (i = 0; i < 5; i++) {\n  setTimeout(function () {\n    console.log(i);\n  }, i*1000);\n}"},{"name":"05. Binding scope","description":"Make the function times return a function that returns the next multiple of n for each subsequent call.","code":"var times = function (n) {\n\n};\n\nvar times2 = times(2);\ntimes2(); // 2\ntimes2(); // 4\ntimes2(); // 6"},{"name":"06. Globally ugly, privately slow, closing sweet (intermediate)","description":"Create a third variant of the isOneTwoOrThree-methods utilizing JavaScript's closures; where data is private, the function is fast - it's sweet.","code":"var data = [1, 2, 3];\nvar uglyIsOneTwoOrThree = function (n) {\n  return data.indexOf(n) != -1;\n};\nassert(uglyIsOneTwoOrThree(1) === true);\nassert(uglyIsOneTwoOrThree(2) === true);\nassert(uglyIsOneTwoOrThree(4) === false);\n\n\nvar slowIsOneTwoOrThree = function (n) {\n  var data = [1, 2, 3];\n  return data.indexOf(n) != -1;\n};\nassert(slowIsOneTwoOrThree(1) === true);\nassert(slowIsOneTwoOrThree(2) === true);\nassert(slowIsOneTwoOrThree(4) === false);\n\n\nvar sweetIsOneTwoOrThree = function () {\n\n}();\nassert(sweetIsOneTwoOrThree(1) === true);\nassert(sweetIsOneTwoOrThree(2) === true);\nassert(sweetIsOneTwoOrThree(4) === false);"},{"name":"07. Variables by reference, revisited (hard)","description":"Log numbers 0-4 correctly by wrapping the anonomous function in a function that is run immediately to bind variable i:","code":"var i;\nfor (i = 0; i < 5; i++) {\n  setTimeout(function () {\n    console.log(i);\n  }, i*1000);\n}"},{"name":"08. What is this","description":"What is this?","code":"var add = function(a, b) {\n  this.result = a + b;\n};\n\nadd(1, 2);\n\nassert( ... === 3);"},{"name":"09. Constructing objects","description":"Construct two car object instances.","code":"function Car (type) {\n  this.type = type;\n}\n\nvar honda = ...\nvar bmw = ...\n\nassert(honda.type === 'honda');\nassert(bmw.type === 'bmw');"},{"name":"10. Context confusion (hard)","description":"Fix the following code by adding one line and changing one word.","code":"var PI = {\n  factor : 3.14,\n  times : function (a) {\n\n    var calculate = function (num) {\n       return num * this.factor; // wtf?\n    };\n\n    return calculate(a);\n  }\n}\n\nassert(PI.times(2) === 6.28);"},{"name":"11. Is this yours (intermediate)","description":"Use Bob's greet method to greet Ed! Don't repeat yourself, please.","code":"var bob = {\n  name: 'Bob',\n  greet: function () {\n    return 'O hai ' + this.name + '!';\n  }\n};\n\nvar ed = {\n  name: 'Ed'\n};\n\nassert(bob.greet() === 'O hai Bob!');\nassert( ... === 'O hai Ed!');"}]},{"name":"03. Inheritance","tasks":[{"name":"01. Pseudoclassical 1 (intermediate)","description":"Utilize the prototype property to have Car instances share the honk method rather than each creating their own.","code":"var Car = function Car () {\n  this.honk = function () {\n    console.log('Honk!');\n  };\n};\n\n//Car.proto..\n\nvar bmw = new Car();\nbmw.honk();\n\nvar honda = new Car();\nhonda.honk();\n\nassert(bmw.honk === honda.honk);"},{"name":"02. Pseudoclassical 2 (intermediate)","description":"Hondas cannot honk! Try to fix this so that new Hondas will share Car's honk method, utilizing Hondas prototype property!","code":"function Car () {}\nCar.prototype.honk = function () {\n  console.log('Honk!');\n};\n\nfunction Honda () {}\n// Honda.proto..\n\nvar h1 = new Honda();\nh1.honk();\n\nvar h2 = new Honda();\nh2.honk();\n\nassert(h1.honk === h2.honk, \"the Hondas does not share Car's honk method\");"},{"name":"03. Prototypal (hard)","description":"Give the car the honk method using protoypal inheritance, inheriting directly from the utilities object.","code":"var utilities = {\n  honk: function () {\n    console.log('Honk!');\n  }\n};\n\nvar create = function create (prototype) {\n  function F () {}\n  // ..\n  return new F();\n};\n\nvar bmw = create(utilities);\nbmw.honk();\n\nvar honda = create(utilities);\nhonda.honk();\n\nassert(bmw.honk === honda.honk);"},{"name":"04. Functional (intermediate)","description":"Make honda h \"inherit\" car's honk method by changing one line of code.","code":"var car = function (spec) {\n  spec = spec || {};\n  var that = {};\n\n  that.honk = function () {\n    return spec.sound;\n  };\n\n  return that;\n};\n\nvar honda = function (spec) {\n  var that = {};\n  return that;\n};\n\nvar h = honda({ sound: 'honk!' }); \nassert(h.honk() === 'honk!');"}]},{"name":"04. Iteration methods","tasks":[{"name":"01. Functional fibonaci","description":"Write a basic functional fibonaci in JS :)","code":"// Feel free to skip this one if you feel you have done it enough times before\n// :)\n\n// Implement a fibonaci function using basic functional programing.\n\nfunction fib(n) {\n\n}\n\nassert(fib(1) == 1, 'fib(1) != 1');\nassert(fib(2) == 1, 'fib(2) != 1');\nassert(fib(3) == 2, 'fib(3) != 2');\nassert(fib(4) == 3, 'fib(4) != 3');\nassert(fib(9) == 34, 'fib(9) != 34');"},{"name":"02. Traversing arrays with forEach","description":"Print all the numbers in the array using your own forEach","code":"var data = [1, 2, 3, 4, 5];\n\n// Implement forEach so that it calls func with the current element, the index\n// and the array on all the items.\n\nfunction forEach(array, func) {\n\n}\n\nforEach(data, function(element, index, array) {\n  console.log(element);\n});\n\n// What about hashes, does your forEach support traversing them?"},{"name":"03. Find what you want","description":"Using your forEach function build a odd number filter","code":"var data = [1, 2, 3, 4, 5, 6, 7, 9, 10];\n\nfunction isOdd(element, index, array) {\n  return element % 2 == 1;\n}\n\n// Implement filter so that it returns an array with all the array elements that\n// func returned true for.\n\nfunction filter(array, func) {\n\n}\n\nvar result = filter(data, isOdd);\n\nconsole.log(result);\n\n// How would you use this basis to create a filterOdd function?"},{"name":"04. Mapping data","description":"Find the square root of all the elements using map()","code":"var data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\n// Implement the map function so that it returns a new array with all the\n// results from the func calls.\n\nfunction map(array, func) {\n\n}\n\nvar result = map(data, Math.sqrt);\nconsole.log(result);"},{"name":"05. Check all those elements","description":"Test all values in the data set","code":"function greaterThanZero(element, index, array) {\n  return element > 0;\n}\n\n// Implement every so that it returns true if all calls to func where true.\n\nfunction every(array, func) {\n\n}\n\nassert(every([1, 2, 3], greaterThanZero) === true);\nassert(every([1, -2, 3], greaterThanZero) === false);"},{"name":"06. Lets find that needle","description":"Find the needle in the haystack","code":"var data = [/* 0 .. 100 */];\nfor (var i = 0; i < 100; i++) {\n  data.push(i);\n}\n\nfunction sumEqualProduct(element, index, array) {\n  var parts = (element + \"\").split(\"\", 2);\n  var first = parseInt(parts[0], 10);\n  var second = parseInt(parts[1], 10);\n  return first+second == first*second;\n}\n\n// Implement the some function so that it indicates if we have at least one\n// result from the function that is true.\n\nfunction some(array, func) {\n\n}\n\nconsole.log(some(data, sumEqualProduct));\n\n// Now use another list manipulation technique to find out which number we\n// found :)\n\n// Does your implementation loop over all the values for all cases, is this\n// necessary?"},{"name":"07. Reduce our answer","description":"Now lets see if we can accumulate an answer...","code":"var data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\nfunction multiply(previousValue, currentValue, index, array) {\n  return previousValue * currentValue;\n}\n\n// The reduce function needs to keep track of an accumulator which is the\n// return value from the callback. The callback should be called in the current\n// accumulator, the current value, index and array like the other iterator\n// methods.\n\nfunction reduce(array, func, initial) {\n\n}\n\nvar result = reduce(data, multiply, 1);\n\nassert(result === 3628800, result);"},{"name":"08. Summing it up","description":"Implement a basic sum function using what we have learned so far.","code":""},{"name":"09. Bringing it together, mapReduce...","description":"Now lets try and combine these techniques...","code":"var text = \"\";\ntext += \"Lorem ipsum dolor sit amet consectetur adipiscing elit Etiam euismod ipsum a\";\ntext += \"convallis pulvinar dui arcu scelerisque mauris luctus consectetur felis lectus\";\ntext += \"sit amet purus In hendrerit ligula at venenatis viverra ipsum dolor tincidunt\";\ntext += \"nulla a cursus ipsum sem id felis Nunc pretium aliquam nisi a molestie\";\ntext += \"Pellentesque laoreet malesuada arcu Nullam tempor dignissim lobortis\";\ntext += \"Suspendisse sed mi augue eu imperdiet orci Cras auctor odio id augue aliquet\";\ntext += \"suscipit Pellentesque laoreet elementum mauris non ullamcorper Sed ac urna\";\ntext += \"vitae eros semper molestie Donec consectetur nunc euismod vehicula adipiscing\";\ntext += \"massa lectus consequat erat eget bibendum nunc nibh eu sapien\";\n\nvar words = text.split(' ');\n\n// For this task we want to count the occurrence of words of various lengths.\n//\n// Step 1: Generate key value pairs for the problem we are solving.\n//         Normally this is spread across multiple machines, but for the sake\n//         of simplicity we will only use one \"node\". Mapped should contain:\n//         [[5, 'Lorem'], [5, 'ipsum'], [4, 'dolor'], ...]\n\nvar mapped = iter.map(words, function(element, index, array) {\n\n});\n\n// Step 2: Group the list of key value pairs by their key.\n//         By using an hash as an initial value we should be able to group our\n//         results in it with array values. We could also use a dedicated\n//         groupBy function to perfom such a task. Grouped should contain:\n//         {5: ['Lorem', 'ipsum', ...], 4: ['dolor', ...], ...}\n\nvar grouped = iter.reduce(mapped, function(previousValue, currentValue, index, array) {\n\n}, {});\n\n// Step 3: Reduce each group into an answer to your problem.\n//         Normally this task would also be distributed, but as this is a single\n//         \"node\" we will need to do all of them our selves.\n\nfor (var key in grouped) {\n  var count = iter.reduce(  )\n  console.log('Words of length ' + key + ': ' + count);\n}"}]}]
